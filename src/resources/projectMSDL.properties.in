### Application window settings

# If set to true, the application will start in fullscreen mode
window.fullscreen = false

# Set the monitor to initially display the window on.
# 0 will use system defaults for placement, 1 and above select a specific monitor.
# If the number is too large, that last available monitor is used.
window.monitor = 0

# Two fullscreen modes are supported:
# - windowed: Uses a borderless window, filling the current monitor.
#             Does not change the current resolution.
# - exclusive: Sets the resolution to window.fullscreen.width/height and runs in exclusive mode,
#              like a game.
window.fullscreen.exclusiveMode = false

# Only used if fullscreen mode is "exclusive"
# If any value is set to 0, the nearest available fullscreen resolution for the current window size is used.
window.fullscreen.width = 0
window.fullscreen.height = 0

# Window size if not in fullscreen
window.width = 1024
window.height = 768

# Wait for vertical sync interval before displaying the next frame.
# This will limit max FPS to the vertical sync frequency but prevent tearing.
window.waitForVerticalSync = true

### projectM settings

# If true, displays the built-in projectM logo preset on startup.
projectM.enableSplash = false

# Target FPS, usually 60.
projectM.fps = 60
# Render mesh size. This is the grid in which "per-pixel" code is executed, once per cell.
projectM.meshX = 200
projectM.meshY = 125

# Transition time in seconds for soft cuts
projectM.transitionDuration = 3

# Path where projectMSDL will search for presets and textures. The directory will be searched recursively.
projectM.presetPath = @DEFAULT_PRESET_PATH@



### Logging configuration

# Verbose log format, includes process/thread ID, source etc.
# See https://docs.pocoproject.org/current/Poco.PatternFormatter.html for available placeholders.
# The "times" property can be either set to "local" (default) or "UTC".
logging.formatters.verbose.class = PatternFormatter
logging.formatters.verbose.pattern = %Y-%m-%dT%h:%M:%S.%iZ [%P][%I] %p: [%s] %t
logging.formatters.verbose.times = local

# Simple log format, only date/time and the message
logging.formatters.simple.class = PatternFormatter
logging.formatters.simple.pattern = %Y-%m-%dT%h:%M:%SZ %t
logging.formatters.simple.times = local

# Default file log, creates a new one if it reaches 1 MiB and keeps a single old log.
# See https://docs.pocoproject.org/current/Poco.FileChannel.html for all possible options.
logging.channels.file.class = FileChannel
logging.channels.file.path = ${system.configHomeDir}/projectM/${application.baseName}.log
logging.channels.file.rotation = 1M
logging.channels.file.archive = number
logging.channels.file.compress = false
logging.channels.file.purgeCount = 1
logging.channels.file.flush = false
logging.channels.file.formatter = simple

# Console logging. Only available on UNIX platforms and inside a Windows debugging session.
logging.channels.console.class = ConsoleChannel
logging.channels.console.formatter = simple

# Duplicates log messages to both console and file channels.
logging.channels.split.class = SplitterChannel
logging.channels.split.channel = console,file

# Memory queue for async logging to improve performance.
logging.channels.async.class = AsyncChannel
logging.channels.async.channel = split

# Default logging settings.
logging.loggers.root.level = information
logging.loggers.root.channel = async

# You can configure log levels, channels etc. for each message source (logger) individually.
# See https://docs.pocoproject.org/current/Poco.Util.LoggingConfigurator.html for details.
# Example:
#     logging.loggers.AudioCapture.level = debug
